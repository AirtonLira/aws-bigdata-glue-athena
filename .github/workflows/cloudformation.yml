# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to AW2 my cloudformation

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create CloudFormation Stack
      run: |
        #!/bin/bash

        STACK_NAME=bigdata-glue-athena

        if ! aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1; then
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-body file://steps/deployment.json \
            --capabilities CAPABILITY_NAMED_IAM
        else
          echo "A stack $STACK_NAME já existe. Excluindo stack existente..."

          aws s3 rm s3://data-file-to-process --recursive

          aws cloudformation delete-stack --stack-name $STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          echo "Stack $STACK_NAME excluída com sucesso!"

          echo "Criando nova stack $STACK_NAME..."

          sleep 59
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-body file://steps/deployment.json \
            --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          echo "Stack $STACK_NAME criada com sucesso!" 
        fi

        echo "Deploy CloudFormation Data files"


    - name: Execute deploy aws glue in stack cloudformation
      run: |
        #!/bin/bash

        aws s3 cp data/covid_data_2.csv s3://data-file-to-process/ --region us-east-1
        STACK_NAME=bigdata-glue-athena
        REGION=us-east-1

        while true; do
          stack_status=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION --query 'Stacks[0].StackStatus' --output text)

          if [ "$stack_status" == "CREATE_IN_PROGRESS" -o "$stack_status" == "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in CREATE_IN_PROGRESS or ROLLBACK_COMPLETE state. Waiting..."
            sleep 80
          else
            break
          fi
        done

        echo "Stack is ok state. Finish stack."
        echo "Execution deploy Glue Crawler to Data files"
        aws cloudformation deploy --template-file steps/aws-glue.json --stack-name $STACK_NAME --capabilities CAPABILITY_NAMED_IAM --region $REGION






# --parameters ParameterKey=Param1,ParameterValue=Value1 ParameterKey=Param2,ParameterValue=Value2
